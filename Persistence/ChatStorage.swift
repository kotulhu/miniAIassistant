//
//  ChatStorage.swift
//  miniGPTdesktop
//
//  Created by El Gato on 21.06.2025.
//

import Foundation
import SQLite3

class ChatStorage {
    static let shared = ChatStorage()
    
    private let dbURL: URL
    private var db: OpaquePointer?

    private init() {
        let fileManager = FileManager.default
        let supportDir = fileManager.urls(for: .applicationSupportDirectory, in: .userDomainMask).first!
        let appSupportDir = supportDir.appendingPathComponent("miniGPTdesktop", isDirectory: true)
        
        do {
            try fileManager.createDirectory(at: appSupportDir, withIntermediateDirectories: true)
        } catch {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: \(error)")
        }
        
        dbURL = appSupportDir.appendingPathComponent("chats.sqlite3")
        print("üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –ø–æ –ø—É—Ç–∏:", dbURL.path)
        
        openDatabase()
        createTables()
        testInsert()
    }

    private func openDatabase() {
        if sqlite3_open(dbURL.path, &db) != SQLITE_OK {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        } else {
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞")
        }
    }

    private func createTables() {
        let createChats = """
        CREATE TABLE IF NOT EXISTS chats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );
        """

        let createMessages = """
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            role TEXT NOT NULL,
            content TEXT NOT NULL,
            model TEXT NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(chat_id) REFERENCES chats(id)
        );
        """

        if sqlite3_exec(db, createChats, nil, nil, nil) != SQLITE_OK {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã chats")
        }

        if sqlite3_exec(db, createMessages, nil, nil, nil) != SQLITE_OK {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã messages")
        }

        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    }

    private func testInsert() {
        let insertSQL = """
        INSERT INTO messages (chat_id, role, content, model)
        VALUES (1, 'system', '–ü—Ä–∏–≤–µ—Ç –∏–∑ —Ç–µ—Å—Ç–∞', 'gpt-3.5-turbo');
        """

        if sqlite3_exec(db, insertSQL, nil, nil, nil) != SQLITE_OK {
            print("‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        } else {
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ")
        }
    }
    func saveMessage(role: String, content: String, model: String, chatId: Int64 = 1) {
        let insert = """
        INSERT INTO messages (chat_id, role, content, model)
        VALUES (?, ?, ?, ?);
        """

        var stmt: OpaquePointer?
        if sqlite3_prepare_v2(db, insert, -1, &stmt, nil) == SQLITE_OK {
            sqlite3_bind_int64(stmt, 1, chatId)
            sqlite3_bind_text(stmt, 2, (role as NSString).utf8String, -1, nil)
            sqlite3_bind_text(stmt, 3, (content as NSString).utf8String, -1, nil)
            sqlite3_bind_text(stmt, 4, (model as NSString).utf8String, -1, nil)

            if sqlite3_step(stmt) != SQLITE_DONE {
                print("‚ùå Failed to insert message")
            }
        } else {
            print("‚ùå Failed to prepare insert statement")
        }

        sqlite3_finalize(stmt)
    }

}
